// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  subdomain String   @unique
  plan      String   @default("free")
  users     User[]
  agents    Agent[]
  calls     Call[]
  integrations Integration[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           String    @default("user")
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([organizationId])
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Agent {
  id             String       @id @default(cuid())
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  calls          Call[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model Call {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  agent          Agent?       @relation(fields: [agentId], references: [id])
  agentId        String?
  startTime      DateTime
  endTime        DateTime?
  recordingUrl   String?
  status         String       @default("pending")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  // One-to-one relation to Transcript
  transcript     Transcript?
  // One-to-many relation to Insights
  insights       Insight[]

  @@index([organizationId])
  @@index([agentId])
}

model Transcript {
  id        String   @id @default(cuid())
  call      Call     @relation(fields: [callId], references: [id])
  callId    String   @unique
  text      Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Insight {
  id         String   @id @default(cuid())
  call       Call     @relation(fields: [callId], references: [id])
  callId     String
  type       String
  content    String   @db.Text
  importance String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([callId])
}

// Integration settings for external platforms (telephony, CRM, etc.)
model Integration {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  provider       String       // e.g. "twilio", "steam-connect"
  name           String       // Display name of the integration
  type           String       // e.g. "call_platform" | "crm"
  status         String       @default("disconnected")
  config         Json?        // provider-specific credentials/config
  lastSync       DateTime?    // timestamp of last successful sync
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}
